### 设计原则

1:  单一职责

    1.  可以降低类的复杂度，一个类只负责一项职责，其逻辑肯定要比负责多项职责简单的多；
    2.  提高类的可读性，提高系统的可维护性；
    3.  变更引起的风险降低，变更是必然的，如果单一职责原则遵守的好，当修改一个功能时，可以显著降低对其他功能的影响。
    
2:  里氏替换原则  (Liskov Substitution Principle)

    1.  子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。
    2.  子类中可以增加自己特有的方法。
    3.  当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。【注意区分重载和重写】
    4.  当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。
    
3.依赖倒置原则 （Dependence Inversion Principle）  
    
    1.  低层模块尽量都要有抽象类或接口，或者两者都有。【可能会被人用到的】
    2.  变量的声明类型尽量是抽象类或接口。
    3.  使用继承时遵循里氏替换原则
    
4.接口隔离原则 （Interface Segregation Principle）     

    1.  接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。
    2.  为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。
    3.  提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情          
    
5.迪米特法则（最少知道原则） （Demeter Principle）    

    通俗的来讲，就是一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类来说，无论逻辑多么复杂，
    都尽量地的将逻辑封装在类的内部，对外除了提供的public方法，不对外泄漏任何信息

6.开闭原则（Open Close Principle）                   

    用抽象构建框架，用实现扩展细节的注意事项而已：
    单一职责原则告诉我们实现类要职责单一；
    里氏替换原则告诉我们不要破坏继承体系；
    依赖倒置原则告诉我们要面向接口编程；
    接口隔离原则告诉我们在设计接口的时候要精简单一；
    迪米特法则告诉我们要降低耦合。
    开闭原则是总纲，他告诉我们要对扩展开放，对修改关闭    
    
    
    
    
    
    
    
    
    